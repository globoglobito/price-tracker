# Kubernetes Secrets for Price Tracker
# Optimized for WSL2 environment with proper secret management
# Note: In production, use proper secret management tools like Sealed Secrets or External Secrets

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  labels:
    app: postgres
    project: price-tracker
type: Opaque
data:
  # PostgreSQL admin password (base64: devhub -> ZGV2aHVi)
  POSTGRES_PASSWORD: ZGV2aHVi
  # PostgreSQL user (base64: admin -> YWRtaW4=)
  POSTGRES_USER: YWRtaW4=
  # PostgreSQL user password (base64: devhub -> ZGV2aHVi)
  password: ZGV2aHVi

---
apiVersion: v1
kind: Secret
metadata:
  name: price-tracker-postgres-credentials
  labels:
    app: price-tracker
    project: price-tracker
type: Opaque
data:
  # Database connection credentials for the application
  # username: admin (base64: YWRtaW4=)
  # password: devhub (base64: ZGV2aHVi)
  username: YWRtaW4=
  password: ZGV2aHVi

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  labels:
    app: price-tracker
    project: price-tracker
type: kubernetes.io/dockerconfigjson
data:
  # Docker Hub credentials for pulling images
  # This should be created with: kubectl create secret docker-registry docker-registry-secret
  # --docker-server=docker.io --docker-username=<username> --docker-password=<token>
  # For now, this is a placeholder - use the kubectl command instead
  .dockerconfigjson: eyJhdXRocyI6eyJkb2NrZXIuaW8iOnsidXNlcm5hbWUiOiJnbG9ib2dsb2JpdG9zIiwicGFzc3dvcmQiOiJZT1VSX0RPQ0tFUl9UT0tFTl9IRVJFIiwiYXV0aCI6IloyeHZZbTluYkc5aWFYUnZjenBaVDFWU1gwUlBRMHRGVWw5VVQwdEZUbDlJUlZKRiJ9fX0=

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  labels:
    app: price-tracker
    project: price-tracker
type: Opaque
data:
  # Application-specific secrets
  # api-key: your-api-key-here (base64: eW91ci1hcGkta2V5LWhlcmU=)
  api-key: eW91ci1hcGkta2V5LWhlcmU=
  # jwt-secret: your-jwt-secret-here (base64: eW91ci1qd3Qtc2VjcmV0LWhlcmU=)
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWhlcmU=
